services:
  db:
    image: postgres:16
    platform: linux/arm64/v8
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d app"]
      interval: 2s
      timeout: 3s
      retries: 20
    restart: unless-stopped
  pgadmin:
    build:
      context: ./docker/pgadmin
    platform: linux/arm64/v8
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      platforms:
        - linux/arm64/v8
    env_file:
      - .env.local
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
    volumes:
      - ./backend/:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
      platforms:
        - linux/arm64/v8
    ports:
      - "5173:5173"
    # Vite 側で API のベースURLを環境変数から読む
    environment:
      - VITE_API_BASE=http://localhost:8000
    volumes:
      - ./frontend:/app
      # node_modules をコンテナ側に保持してホストと衝突しないようにする
      - /app/node_modules
    restart: unless-stopped
volumes:
  pgdata:
  pgadmin-data: